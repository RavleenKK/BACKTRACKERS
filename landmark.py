# -*- coding: utf-8 -*-
"""landmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jTMwHHO-fAtkf5lpVgDcEn6eGP5eRWRA
"""

!pip install -q gradio

import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import gradio as gr
import PIL.Image as Image
import tensorflow as tf
import tensorflow_hub as hub
from gradio import   Interface

TF_MODEL_URL = 'https://tfhub.dev/google/on_device_vision/classifier/landmarks_classifier_asia_V1/1'
LABEL_MAP_URL = 'https://www.gstatic.com/aihub/tfhub/labelmaps/landmarks_classifier_asia_V1_label_map.csv'
IMAGE_SHAPE = (321, 321)

classifier = tf.keras.Sequential([hub.KerasLayer(TF_MODEL_URL,
                                                 input_shape=IMAGE_SHAPE+(3,),
                                                 output_key="predictions:logits")])

df = pd.read_csv(LABEL_MAP_URL)

label_map = dict(zip(df.id, df.name))

df.head(3)

img_loc = "/harmindersahib.jpg"

img = Image.open(img_loc).resize(IMAGE_SHAPE)

img

img = np.array(img)/255.0
img.shape

img = img[np.newaxis, ...]

img.shape

result = classifier.predict(img)

result

label_map[np.argmax(result)]

class_names=list(label_map.values())

def classify_image(image):
    img = np.array(image)/255.0
    img = img[np.newaxis, ...]
    prediction = classifier.predict(img)
    return label_map[np.argmax(prediction)]

# Assuming target_shape is (321, 321)
target_shape = (321, 321)

def resize_or_crop_function(input_image, target_shape):
    pil_image = Image.fromarray((input_image * 255).astype(np.uint8))
    resized_image = pil_image.resize(target_shape, Image.ANTIALIAS)
    resized_image_np = np.array(resized_image) / 255.0
    return resized_image_np

def classify_image(image):
    resized_image = resize_or_crop_function(image, target_shape)
    img = resized_image[np.newaxis, ...]
    prediction = classifier.predict(img)
    return label_map[np.argmax(prediction)]

# Create the Gradio interface using gr.TrainedModel
model_interface = gr.Interface(
    fn=classify_image,
    inputs=gr.Image(),
    outputs=gr.Label(num_top_classes=1),

)

# Launch the interface
model_interface.launch(debug=True)